import pygame
import math
import random

# Initialize pygame
pygame.init()

# Screen setup
WIDTH, HEIGHT = 800, 600
FPS = 60
BULLET_RADIUS = 5
RED = (255, 0, 0)
WHITE = (255, 255, 255)

# Initialize screen and clock
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("AstroCrash")
clock = pygame.time.Clock()

# Font for HUD
font = pygame.font.SysFont("Arial", 20)

# ----- Ship Class -----
class Ship:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.angle = 0
        self.size = 15  # Used for collision radius

    def move_towards(self, target_x, target_y):
        # Move gradually toward the mouse position
        self.x += (target_x - self.x) * 0.1
        self.y += (target_y - self.y) * 0.1

    def rotate(self, angle_change):
        self.angle += angle_change

    def draw(self):
        # Calculate the points of a triangle representing the ship
        point1 = (self.x + 20 * math.cos(math.radians(self.angle)),
                  self.y + 20 * math.sin(math.radians(self.angle)))
        point2 = (self.x + 20 * math.cos(math.radians(self.angle + 120)),
                  self.y + 20 * math.sin(math.radians(self.angle + 120)))
        point3 = (self.x + 20 * math.cos(math.radians(self.angle + 240)),
                  self.y + 20 * math.sin(math.radians(self.angle + 240)))
        pygame.draw.polygon(screen, WHITE, [point1, point2, point3])

# ----- Bullet Class -----
class Bullet:
    def __init__(self, x, y, angle):
        self.x = x
        self.y = y
        speed = 10
        self.dx = speed * math.cos(math.radians(angle))
        self.dy = speed * math.sin(math.radians(angle))

    def move(self):
        self.x += self.dx
        self.y += self.dy

    def draw(self):
        pygame.draw.circle(screen, WHITE, (int(self.x), int(self.y)), BULLET_RADIUS)

# ----- Asteroid Class -----
class Asteroid:
    def __init__(self, x=None, y=None, size=None):
        self.size = size if size else random.randint(20, 40)
        self.x = x if x is not None else random.randint(0, WIDTH)
        self.y = y if y is not None else random.randint(0, HEIGHT)
        angle = random.uniform(0, 360)
        speed = random.uniform(1, 3)
        self.dx = speed * math.cos(math.radians(angle))
        self.dy = speed * math.sin(math.radians(angle))

    def move(self):
        self.x += self.dx
        self.y += self.dy

        # Wrap around screen
        if self.x < 0: self.x = WIDTH
        if self.x > WIDTH: self.x = 0
        if self.y < 0: self.y = HEIGHT
        if self.y > HEIGHT: self.y = 0

    def draw(self):
        pygame.draw.circle(screen, (0, 255, 0), (int(self.x), int(self.y)), self.size)

    def split(self):
        # Split into two smaller asteroids if big enough
        if self.size < 15:
            return []
        new_size = self.size // 2
        return [Asteroid(self.x, self.y, new_size), Asteroid(self.x, self.y, new_size)]

# ----- Game Setup -----
ship = Ship(WIDTH // 2, HEIGHT // 2)
bullets = []
asteroids = [Asteroid() for _ in range(5)]
score = 0
lives = 3
level = 1
running = True

# ----- Main Game Loop -----
while running:
    screen.fill((0, 0, 0))  # Clear screen

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False  # Exit game
        elif event.type == pygame.MOUSEBUTTONDOWN:
            # Fire bullet in ship's direction
            bullets.append(Bullet(ship.x, ship.y, ship.angle))

    # Move ship toward mouse
    mouse_x, mouse_y = pygame.mouse.get_pos()
    ship.move_towards(mouse_x, mouse_y)

    # Rotate ship with keys
    keys = pygame.key.get_pressed()
    if keys[pygame.K_q]:
        ship.rotate(-5)
    if keys[pygame.K_e]:
        ship.rotate(5)

    # ----- Update Bullets -----
    for bullet in bullets[:]:  # Copy list to avoid modifying while looping
        bullet.move()
        bullet.draw()
        # Remove bullet if it goes off screen
        if bullet.x < 0 or bullet.x > WIDTH or bullet.y < 0 or bullet.y > HEIGHT:
            bullets.remove(bullet)

    # ----- Update Asteroids -----
    asteroids_to_remove = []
    new_asteroids = []

    for asteroid in asteroids:
        asteroid.move()
        asteroid.draw()

        # Check collision with bullets
        for bullet in bullets[:]:
            distance = math.hypot(asteroid.x - bullet.x, asteroid.y - bullet.y)
            if distance < asteroid.size + BULLET_RADIUS:
                if asteroid not in asteroids_to_remove:
                    asteroids_to_remove.append(asteroid)
                    score += 10  # Add points
                    new_asteroids.extend(asteroid.split())
                if bullet in bullets:
                    bullets.remove(bullet)

        # Check collision with ship
        ship_distance = math.hypot(asteroid.x - ship.x, asteroid.y - ship.y)
        if ship_distance < asteroid.size + ship.size:
            lives -= 1
            asteroids_to_remove.append(asteroid)
            if lives <= 0:
                running = False  # Game over

    # Remove and split asteroids
    for asteroid in asteroids_to_remove:
        if asteroid in asteroids:
            asteroids.remove(asteroid)
    asteroids.extend(new_asteroids)

    # ----- Asteroid-Asteroid Collisions -----
    for i in range(len(asteroids)):
        for j in range(i + 1, len(asteroids)):
            a1 = asteroids[i]
            a2 = asteroids[j]
            dist = math.hypot(a1.x - a2.x, a1.y - a2.y)
            if dist < a1.size + a2.size:
                # Swap movement direction (simple bounce)
                a1.dx, a2.dx = a2.dx, a1.dx
                a1.dy, a2.dy = a2.dy, a1.dy

    # ----- Check for Level Up -----
    if len(asteroids) == 0:
        level += 1
        for _ in range(level * 3):  # Increase number of asteroids
            asteroids.append(Asteroid())

    # ----- Draw Everything -----
    ship.draw()

    # Draw HUD: score, lives, level
    score_text = font.render(f"Score: {score}", True, WHITE)
    lives_text = font.render(f"Lives: {lives}", True, (255, 0, 0))
    level_text = font.render(f"Level: {level}", True, (0, 255, 255))
    screen.blit(score_text, (10, 10))
    screen.blit(lives_text, (10, 40))
    screen.blit(level_text, (10, 70))

    # Custom red cursor at mouse position
    pygame.draw.circle(screen, RED, (mouse_x, mouse_y), 5)

    # Update screen and limit FPS
    pygame.display.update()
    clock.tick(FPS)

# Quit the game
pygame.quit()
